---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: hello-world
  annotations:
    argocd/app-name: hello-world
    backstage.io/kubernetes-id: hello-world
    backstage.io/kubernetes-namespace: backstage-test
    tekton.dev/cicd: "true"
    janus-idp.io/tekton: hello-world
    quay.io/repository-slug: 'ralvarezbackstage/hello-world'
    sonarqube.org/project-key: "sonarqube-dev/hello-world"
  tags:
    - springboot
    - api
    - microservice
spec:
  type: service
  lifecycle: production
  owner: user:default/user1
  providesApis:
    - hello-world
  ---
  apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: hello-world
  description: Hello World example for gRPC
spec:
  type: grpc
  lifecycle: deprecated
  owner: team-c
  definition: |
    // Copyright 2015 gRPC authors.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //     http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    syntax = "proto3";

    option java_multiple_files = true;
    option java_package = "io.grpc.examples.helloworld";
    option java_outer_classname = "HelloWorldProto";
    option objc_class_prefix = "HLW";

    package helloworld;

    // The greeting service definition.
    service Greeter {
      // Sends a greeting
      rpc SayHello (HelloRequest) returns (HelloReply) {}
    }

    // The request message containing the user's name.
    message HelloRequest {
      string name = 1;
    }

    // The response message containing the greetings
    message HelloReply {
      string message = 1;
    }
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: petstore
  description: The petstore API
  tags:
    - store
    - rest
  links:
    - url: https://github.com/swagger-api/swagger-petstore
      title: GitHub Repo
      icon: github
    - url: https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml
      title: API Spec
      icon: code
spec:
  type: openapi
  lifecycle: experimental
  owner: team-c
  definition:
    $text: ./petstore.oas.yaml
